import re
import os
import numpy as np


REL_DIRPATH_FROM_SCRIPT = "../src/autogenerated"
REL_DIRPATH_FROM_MODULE = "../autogenerated"


def replace_sin_cos(s):
    def sin_repl(m):
        return "s" + m.group(1)

    def cos_repl(m):
        return "c" + m.group(1)

    s = re.sub("sin\(([a-z0-9]+)\)", sin_repl, s)
    s = re.sub("cos\(([a-z0-9]+)\)", cos_repl, s)
    return s


def encode_matrix(J):
    """Encode matrix as a string."""
    J_str = np.empty(J.shape, dtype=object)
    for i in range(J.shape[0]):
        for j in range(J.shape[1]):
            s = str(J[i, j])
            J_str[i, j] = replace_sin_cos(s)
    return J_str


def get_default_file_path(script_dirname, filename):
    """Get the default path for a generated file.

    script_dirname: path to directory of the calling script (this can be
        obtained using os.path.realpath(__file__)
    filename: the name of the file to be generated
    """
    path = os.path.join(script_dirname, REL_DIRPATH_FROM_SCRIPT)
    path = os.path.join(path, filename)
    return os.path.realpath(path)


def get_default_file_path_from_module(module_dirname, filename):
    """Get the default path for a generated file.

    script_dirname: path to directory of the calling script (this can be
        obtained using os.path.realpath(__file__)
    filename: the name of the file to be generated
    """
    path = os.path.join(module_dirname, REL_DIRPATH_FROM_MODULE)
    path = os.path.join(path, filename)
    return os.path.realpath(path)
