from __future__ import print_function
import os
import numpy as np
import dill

from mm_kinematics import codegen


KINEMATICS_PICKLE_NAME = "kinematics.pkl"
KINEMATIC_FUNC_NAMES = ["jacobian", "calc_T_w_tool", "calc_T_w_ee",
                        "calc_T_w_palm", "calc_T_w_ft"]


class KinematicModel(object):
    def __init__(self):
        self._load_generated_functions()

    def _load_generated_functions(self):
        path = os.path.dirname(__file__)
        path = codegen.get_default_file_path_from_module(path, KINEMATICS_PICKLE_NAME)

        try:
            with open(path, 'rb') as f:
                kinematic_funcs = dill.load(f)
        except IOError as e:
            print("Autogenerated functions were not found. Generate them using the script `generate_kinematics_python.py`.")
            raise e

        for name in KINEMATIC_FUNC_NAMES:
            setattr(self, name, kinematic_funcs[name])

    def manipulability(self, q):
        """Calculate manipulability index."""
        J = self.jacobian(q)

        # only the arm Jacobian is relevant for manipulability
        J = J[:, 3:]

        m2 = np.linalg.det(J.dot(J.T))

        # handle numerical errors pushing us slightly negative
        if m2 < 0:
            m2 = 0
        m = np.sqrt(m2)
        return m
